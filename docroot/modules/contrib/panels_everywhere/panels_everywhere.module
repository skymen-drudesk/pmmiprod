<?php

use Drupal\page_manager\PageVariantInterface;
use Drupal\Core\Form\FormStateInterface;

// --------------------------------------------------------------------------
// Page Manager integration

function panels_everywhere_form_page_manager_general_form_alter(&$form, FormStateInterface $form_state) {
  $cached_values = $form_state->getTemporaryValue('wizard');
  /** @var $page \Drupal\page_manager\Entity\Page */
  $page = $cached_values['page'];

  $new_field = array(
    '#type' => 'details',
    '#title' => t('Panels Everywhere additional options'),
    '#open' => true,
    'disable_route_override' => array(
      '#type' => 'checkbox',
      '#title' => t('Disable route override'),
      '#default_value' => $page->getThirdPartySetting('panels_everywhere', 'disable_route_override')
    )
  );

  if ($actions_position = array_search('actions', array_keys($form))) {
    array_splice_assoc($form, $actions_position, 1, [
      'panels_everywhere' => $new_field,
      'actions' => $form['actions']
    ]);
  } else {
    $form['panels_everywhere'] = $new_field;
  }
  $form['#submit'][] = 'page_manager_general_form_submit';
  foreach ($form['actions'] as $action_name => &$action) {
    if ($action_name != 'cancel') {
      $pos = count($action['#submit']) - 1;
      array_splice($action['#submit'], $pos, 1, [
        'page_manager_general_form_submit',
        $action['#submit'][$pos]
      ]);
    }
  }
}

function page_manager_general_form_submit($form, &$form_state) {
  $cached_values = $form_state->getTemporaryValue('wizard');
  /** @var $page \Drupal\page_manager\Entity\Page */
  $page = $cached_values['page'];

  $page->setThirdPartySetting('panels_everywhere', 'disable_route_override',
    $form_state->getValue('disable_route_override'));
}



/**
 * Implements hook_ENTITY_TYPE_create().
 *
 * We need to set the storage information on Panels displays being storaged
 * in Page Manager as early as possible, to signal to Panels that features
 * requiring Panels storage (like the IPE) are supported.
 *
 * @see panels_page_variant_presave()
 */
function panels_everywhere_page_variant_create(PageVariantInterface $page_variant) {
  if ($page_variant->getVariantPluginId() == 'panels_everywhere_variant') {
    /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display */
    $panels_display = $page_variant->getVariantPlugin();
    // At this point, it very likely that $page_variant->id() is NULL. But
    // setting the storage type to 'page_manager' is enough to trigger Panels
    // to offer the IPE as an option.
    $panels_display->setStorage('page_manager', $page_variant->id());
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Now that we have the id for the page variant, we need to set the storage
 * information again.
 *
 * @see panels_page_variant_create()
 */
function panels_everywhere_page_variant_presave(PageVariantInterface $page_variant) {
  if ($page_variant->getVariantPluginId() == 'panels_everywhere_variant') {
    /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display */
    $panels_display = $page_variant->getVariantPlugin();
    // Set the storage info now that we have the id.
    $panels_display->setStorage('page_manager', $page_variant->id());
    // It's ConfigEntityBase::preSave() that copies configuration from plugin
    // collections to the config entity, and unfortunately, that runs just
    // before invoking hook_entity_presave(). So, we have to copy the
    // configuration from $panels_display to $page_variant again manually for
    // it to be saved.
    $page_variant->set('variant_settings', $panels_display->getConfiguration());
  }
}

// --------------------------------------------------------------------------

/* Like array_splice(), but preserves the key(s) of the replacement array. */
function array_splice_assoc(&$input, $offset, $length = 0, $replacement = array()) {
  $tail = array_splice($input, $offset);
  $extracted = array_splice($tail, 0, $length);
  $input += $replacement + $tail;
  return $extracted;
};
