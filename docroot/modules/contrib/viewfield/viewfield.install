<?php

/**
 * @file
 * Installation functions for Viewfield module.
 */

use Drupal\Core\Database\Database;

/**
 * Implements hook_field_schema().
 */
function viewfield_field_schema($field) {
  return array(
    'columns' => array(
      'vname' => array(
        'type' => 'varchar',
        'not null' => FALSE,
        // Views requires at least 96 chars for the view name and display, plus
        // we need 1 for our delimiter. Round up to a common value of 128.
        'length' => 128,
      ),
      'vargs' => array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 255,
      ),
      'settings' => array(
        'type' => 'text',
        'size' => 'normal',
      ),
    ),
  );
}

/**
 * Add column to fields with viewfield type.
 */
function viewfield_update_8001() {
  $entity_type_manager = \Drupal::entityTypeManager();
  $field_storage = $entity_type_manager->getStorage('field_storage_config');
  $entity_field_manager = \Drupal::service('entity_field.manager');
  if ($field_storage_configs = $field_storage->loadByProperties(array('type' => 'viewfield'))) {
    foreach ($field_storage_configs as $field) {
      $field_name = $field->getName();
      $entity_type_id = $field->getTargetEntityTypeId();
      $field_storage_definitions = $entity_field_manager->getFieldStorageDefinitions($entity_type_id);
      $entity_storage = $entity_type_manager->getStorage($entity_type_id);
      /** @var Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
      $table_mapping = $entity_storage->getTableMapping($field_storage_definitions);

      // Table name.
      $table = $table_mapping->getFieldTableName($field_name);

      // See if the field has a revision table.
      $entity_type = $entity_type_manager->getDefinition($entity_type_id);
      $revision_table = NULL;
      if ($entity_type->isRevisionable() && $field->isRevisionable()) {
        if ($table_mapping->requiresDedicatedTableStorage($field)) {
          $revision_table = $table_mapping->getDedicatedRevisionTableName($field);
        }
        elseif ($table_mapping->allowsSharedTableStorage($field)) {
          $revision_table = $entity_type->getRevisionDataTable() ?: $entity_type->getRevisionTable();
        }
      }
      $spec = array(
        'type' => 'text',
        'size' => 'normal',
        'description' => 'View settings',
      );
      $schema = Database::getConnection()->schema();
      $schema->addField($table, $field_name . '_settings', $spec);
      if ($revision_table) {
        $schema->addField($revision_table, $field_name . '_settings', $spec);
      }
    }
  }
}
